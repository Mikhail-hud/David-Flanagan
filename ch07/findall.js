// Find all occurrences of a value x in an array a and return an array
// of matching indexes
function findall(a, x) {
  let results = [],            // The array of indexes we'll return
    len = a.length,          // The length of the array to be searched
    pos = 0;                 // The position to search from
  while (pos < len) {           // While more elements to search...
    pos = a.indexOf(x, pos); // Search
    if (pos === -1) break;   // If nothing found, we're done.
    results.push(pos);       // Otherwise, store index in array
    pos = pos + 1;           // And start next search at next element
  }
  return results;              // Return array of indexes
}

///Создание масивов

let x = 'Hello World'
let test = new Array() // конструктор, создаёт пустой масив, без елементов, эквивалентно литералу типа []
let test2 = new Array(10) // конструктор, создаёт масиов с длиной 10

Array.of(); // конструктор, создаёт пустой масив, без елементов, эквивалентно литералу типа []
Array.of(10); // конструктор, создаёт масив со значением [10]

Array.from(x)  // в первом аргументе принимает итерируемый или похожий на массив обьект и возвращает новый масив

//Операция распространения
let a = [1, 2, 3]
let b = [0, ...a, 4] // b = [0,1,2,3,4]
// модификация копии не приводит к изменению оригинала
let original = [1, 2, 3]
let copy = [...original]
copy[0] = 0;
original[0] // => 1

// чтение и запись

let a = ["world"];
let value = a[0]; // прочитать элемент 0
a[1] = 3.14 // записать элемент 1

let i = 2;
a[i] = 3; // записать элемент 2
a[i + 1] = "hello" // записать элемент 3;

/// Итерация
let latters = [..."Hellow World"] /// ["H", "e", "l", "l", "o", "w", " ", "W", "o", "r", "l", "d"]
let string = ""
for (let letter of latters) {
  string += letter;
}// "Hello World"

let everyother = "";
for (let [index, letter] of latters.entries()) {
  if (index % 2 === 0) everyother += letter
}

for (let i = 0; i < a.length; i++) {
  if (a[i] === undefined) continue; // пропускает не определенные и не существующие элементы
}

/// Методы масивов
// Методы итераторов
// Методы стеков и очередей добавлют и удаляют эелементы в начале и конце
// Методы подмасивов извекают, удаляют, вствляют, заполняют, копируют, непрерывные области более крупного масива
// Методы посика и сортировки

let data = [1, 2, 3, 4, 5];
let sum = 0
data.forEach(value => sum += value) // 15 проходит по массиву вызывая для каждого элемента указаную вами функцию с тремя аргументами:
// значение элемента масива, индекс и сам Масив.
data.forEach((v, i, a) => {
  a[i] = v + 1;
})

let t = [1, 2, 3]
t.map((x) => {
  return x * x
}) // Функция должна возвращать значение. Метод возращает новый масив, не модифицирует масив на кором вызываеться

let a = [5, 4, 3, 2, 1];
a.filter((x) => x < 3) // [2,1] значения меньше 3. Возращает масив содержащий подмножество элементов массива на коротом он был вызван
// передаваяемая функция должна быть предикатом (возвращающая true, false)

let a = [1, 2, 3, 4, 5]
a.find((x) => x % 5 === 0) // 5 возвращает первое значение и прекращает итерацию. undefined если нет совпадений.
a.findIndex((x) => x === 3) // 2 возращает индекс первого совпадения. и -1 если совпадений нет

// Every(), some() - являються предикатами массивов они применяют указаную функцию предиката и возращают true или false.
// останавливают итерацию как только становиться известно какое значение возвращать.
// на пустой массив Every() возвращает true, some() - false возвращает

// Every() возвращает true, если и только ваша функция предикат возращает true для всех элементов массива
let a = [1, 2, 3, 4, 5]
a.every((x) => x < 10)// true

//Some() возвращает true, если в массиве существует хотябы один элемент, для которого предикат возвращает true;
let a = [1, 2, 3, 4, 5]
a.some((x) => x % 2 === 0)// true;

/// reduce обьеденяет элементы массива для получения единственного значения. Принимает два аргумента, первый функцию второй (необязательный) начальное значение.
// аргументы функции ( 1 - начальное значение, 2 - значение, 3 - индекс, 4 - массив)
let a = [1, 2, 3, 4, 5]
a.reduce((x, y) => x + y, 0) // 15, сума значений.
a.reduce((x, y) => (x > y) ? x : y) // 5 наибольшее из значений

/// flat создаёт и возращает новый "выровненный" массив.
  [1, [2, 3]].flat() /// [1,2,3]
  [1, [2, [3]]].flat()/// [1,[2,3]]

// Concat создаёт и возвоащает новый массив содержащий эелементы исходного массива (не модифицирует массив на котором вызываетсья)
let a = [1, 2, 3]
a.concat([4, 5])// [1,2,3,4,5]
a.concat([4, 5], [6, 7]) // [1,2,3,4,5,6,7] массивы выравниваються

// slice() возвращает срез или подмасив заданого массива (не модифицирует массив на котором вызываетсья)

let a = [1, 2, 3, 4, 5]

a.slice(0, 3) // [1, 2, 3] от 0 до 3 эелемента не включая его.
a.slice(3) // [4, 5] от начальной позиции до конца масива.

// splice() для вставки или удаления элементов  массива (модифицирует массив на котором вызываетсья)
let a = [1, 2, 3, 4, 5, 6, 7, 8]

a.splice(4) // [5, 6, 7, 8] , a = [1, 2, 3, 4]
a.splice(1, 2) // [2, 3] a = [1,4]

// fill() устанавливает елементы массива или среза массива в указанное значение (модифицирует массив на котором вызываетсья, а также возвращает модифицированый массив)

let a = new Array(5) // массив длин 5 без элементов
a.fill(0)// [0,0,0,0,0]
a.fill(9, 1)// [0,9,9,9,9]
a.fill(8, 2, -1) // [0, 9, 8, 8, 9] заполнить значениями 8 по индексам 2 3

// indexOf() lastIndexOf() ищут в массиве елемент с указанным значением и возвращают идекс первого найденого такого элемента.
// или -1 если не чего не было найдено
let a = [0, 1, 2, 1, 0];
a.indexOf(1) // 1. a[1] = 1;

//includes() принимает единственный вргумент и возращает true если массив содержит значние или false в противном случае
let a = [1, true, 3, NaN]
a.includes(true) // true
a.includes(NaN) // true
a.indexOf(NaN) // -1 indexOf() не может отслеживать NaN

//sort() сотртирует элементы на месте и возвращает отсортированый массив (при вызове без аргументов сортирует в алфавитном порядке)

let items = [
  {name: 'Edward', value: 21},
  {name: 'Sharpe', value: 37},
  {name: 'And', value: 45},
  {name: 'The', value: -12},
  {name: 'Magnetic'},
  {name: 'Zeros', value: 37}
];
items.sort(function (a, b) {
  if (a.name > b.name) {
    return 1;
  }
  if (a.name < b.name) {
    return -1;
  }
  // a должно быть равным b
  return 0;
});
// [
// {name: "And", value: 45},
// {name: "Edward", value: 21},
// {name: "Magnetic"},
// {name: "Sharpe", value: 37},
// {name: "The", value: -12},
// {name: "Zeros", value: 37}
// ]

let numbers = [4, 2, 5, 1, 3];
numbers.sort(function (a, b) {
  return a - b;
});
console.log(numbers); // [1, 2, 3, 4, 5]

// join(): преобразует все елементы массива в строки и выполняет их конкатенацию

let a = [1, 2, 3]
a.join() // "1,2,3" если строка разделителя не задана тогда применяеться запятая
a.join(" ") // "1 2 3"
a.join("") // "123"



